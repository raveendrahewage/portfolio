{"remainingRequest":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\particles-bg-vue\\src\\particles-bg\\particles\\TadpoleParticles.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\particles-bg-vue\\src\\particles-bg\\particles\\TadpoleParticles.vue","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport { getColor } from \"../utils/Color\";\n\nconst colors = [\n  \"#fad390\",\n  \"#81ecec\",\n  \"#ffffff\",\n  \"#badc58\",\n  \"#f9ca24\",\n  \"#FEA47F\"\n];\nexport default {\n  name: \"TadpoleParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      this.createProton(canvas);\n      RAFManager.add(this.renderProton);\n    },\n    canvasResize({ width, height }) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.proton = new Proton();\n\n      const emitter = new Proton.Emitter();\n      emitter.damping = 0.008;\n      emitter.rate = new Proton.Rate(this.num ? this.num : 50);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(5, 9));\n      emitter.addInitialize(\n        new Proton.Velocity(\n          new Proton.Span(1.5),\n          new Proton.Span(0, 360),\n          \"polar\"\n        )\n      );\n      emitter.addInitialize(\n        new Proton.Position(new Proton.RectZone(0, 0, width, height))\n      );\n\n      const mouseInfo = {\n        x: width / 2,\n        y: height / 2\n      };\n\n      const attractionBehaviour = new Proton.Attraction(mouseInfo, 0, 0);\n      const crossZoneBehaviour = new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      );\n      emitter.addBehaviour(new Proton.Color(this.color || \"#bbbbbb\"));\n      //emitter.addBehaviour(new Proton.Alpha(new Proton.Span(0.5, 1)));\n      emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.RandomDrift(15, 15, 0.05));\n      emitter.emit(\"once\");\n\n      this.proton.addEmitter(emitter);\n      this.proton.addRenderer(this.createRenderer(canvas));\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    },\n    createRenderer(canvas) {\n      const jointCount = 12;\n      const delayTime = 6;\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CanvasRenderer(canvas);\n\n      renderer.onProtonUpdate = function() {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        particle.data.points = [];\n        particle.data.index = 0;\n      };\n\n      renderer.onParticleUpdate = function(particle) {\n        drawTadpoleTail(particle);\n        if (particle.data.index % delayTime === 0) fillPointsData(particle);\n        drawTadpoleHead(particle);\n        particle.data.index++;\n      };\n\n      const fillPointsData = particle => {\n        particle.data.points.unshift(particle.p.y);\n        particle.data.points.unshift(particle.p.x);\n\n        if (particle.data.points.length > jointCount) {\n          particle.data.points.pop();\n          particle.data.points.pop();\n        }\n      };\n\n      const drawTadpoleHead = particle => {\n        context.fillStyle = particle.color;\n        context.beginPath();\n        context.arc(\n          particle.p.x,\n          particle.p.y,\n          particle.radius,\n          0,\n          Math.PI * 2,\n          true\n        );\n        context.closePath();\n        context.fill();\n      };\n\n      const drawTadpoleTail = particle => {\n        context.beginPath();\n        context.strokeStyle = particle.color;\n\n        context.moveTo(particle.p.x, particle.p.y);\n\n        const l = particle.data.points.length;\n        for (let i = 0; i < l; i += 2) {\n          const x = particle.data.points[i];\n          const y = particle.data.points[i + 1];\n\n          context.lineWidth = linearEvaluation(i, l);\n          context.lineTo(x, y);\n          context.stroke();\n        }\n      };\n\n      const linearEvaluation = (i, l) => {\n        if (l <= 2) return 1;\n\n        const max = 6;\n        const A = (max - 1) / (2 / l - 1);\n        const B = 1 - A;\n        const X = (i + 2) / l;\n        let val = A * X + B;\n        val = val >> 0;\n\n        return val;\n      };\n\n      return renderer;\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestory() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n",{"version":3,"sources":["TadpoleParticles.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TadpoleParticles.vue","sourceRoot":"node_modules/particles-bg-vue/src/particles-bg/particles","sourcesContent":["<template>\n  <canvas-comp\n    :bg=\"bg\"\n    :canvas=\"canvas\"\n    global-composite-operation=\"xor\"\n    v-on:canvasInited=\"canvasInited\"\n    v-on:canvasResize=\"canvasResize\"\n    v-on:canvasMouseDown=\"canvasMouseDown\"\n  />\n</template>\n\n<script>\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport { getColor } from \"../utils/Color\";\n\nconst colors = [\n  \"#fad390\",\n  \"#81ecec\",\n  \"#ffffff\",\n  \"#badc58\",\n  \"#f9ca24\",\n  \"#FEA47F\"\n];\nexport default {\n  name: \"TadpoleParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      this.createProton(canvas);\n      RAFManager.add(this.renderProton);\n    },\n    canvasResize({ width, height }) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.proton = new Proton();\n\n      const emitter = new Proton.Emitter();\n      emitter.damping = 0.008;\n      emitter.rate = new Proton.Rate(this.num ? this.num : 50);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(5, 9));\n      emitter.addInitialize(\n        new Proton.Velocity(\n          new Proton.Span(1.5),\n          new Proton.Span(0, 360),\n          \"polar\"\n        )\n      );\n      emitter.addInitialize(\n        new Proton.Position(new Proton.RectZone(0, 0, width, height))\n      );\n\n      const mouseInfo = {\n        x: width / 2,\n        y: height / 2\n      };\n\n      const attractionBehaviour = new Proton.Attraction(mouseInfo, 0, 0);\n      const crossZoneBehaviour = new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      );\n      emitter.addBehaviour(new Proton.Color(this.color || \"#bbbbbb\"));\n      //emitter.addBehaviour(new Proton.Alpha(new Proton.Span(0.5, 1)));\n      emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.RandomDrift(15, 15, 0.05));\n      emitter.emit(\"once\");\n\n      this.proton.addEmitter(emitter);\n      this.proton.addRenderer(this.createRenderer(canvas));\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    },\n    createRenderer(canvas) {\n      const jointCount = 12;\n      const delayTime = 6;\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CanvasRenderer(canvas);\n\n      renderer.onProtonUpdate = function() {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        particle.data.points = [];\n        particle.data.index = 0;\n      };\n\n      renderer.onParticleUpdate = function(particle) {\n        drawTadpoleTail(particle);\n        if (particle.data.index % delayTime === 0) fillPointsData(particle);\n        drawTadpoleHead(particle);\n        particle.data.index++;\n      };\n\n      const fillPointsData = particle => {\n        particle.data.points.unshift(particle.p.y);\n        particle.data.points.unshift(particle.p.x);\n\n        if (particle.data.points.length > jointCount) {\n          particle.data.points.pop();\n          particle.data.points.pop();\n        }\n      };\n\n      const drawTadpoleHead = particle => {\n        context.fillStyle = particle.color;\n        context.beginPath();\n        context.arc(\n          particle.p.x,\n          particle.p.y,\n          particle.radius,\n          0,\n          Math.PI * 2,\n          true\n        );\n        context.closePath();\n        context.fill();\n      };\n\n      const drawTadpoleTail = particle => {\n        context.beginPath();\n        context.strokeStyle = particle.color;\n\n        context.moveTo(particle.p.x, particle.p.y);\n\n        const l = particle.data.points.length;\n        for (let i = 0; i < l; i += 2) {\n          const x = particle.data.points[i];\n          const y = particle.data.points[i + 1];\n\n          context.lineWidth = linearEvaluation(i, l);\n          context.lineTo(x, y);\n          context.stroke();\n        }\n      };\n\n      const linearEvaluation = (i, l) => {\n        if (l <= 2) return 1;\n\n        const max = 6;\n        const A = (max - 1) / (2 / l - 1);\n        const B = 1 - A;\n        const X = (i + 2) / l;\n        let val = A * X + B;\n        val = val >> 0;\n\n        return val;\n      };\n\n      return renderer;\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestory() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n</script>\n"]}]}