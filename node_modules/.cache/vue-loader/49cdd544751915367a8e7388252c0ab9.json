{"remainingRequest":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\New folder\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\New folder\\node_modules\\particles-bg-vue\\src\\particles-bg\\particles\\PolygonParticles.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\New folder\\node_modules\\particles-bg-vue\\src\\particles-bg\\particles\\PolygonParticles.vue","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\New folder\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\New folder\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\New folder\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\New folder\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\n\nconst COLOR = [\n  \"#f6b93b\",\n  \"#18dcff\",\n  \"#cd84f1\",\n  \"#ED4C67\",\n  \"#ffffff\",\n  \"#b71540\",\n  \"#32ff7e\",\n  \"#ff3838\"\n];\n\nexport default {\n  name: \"PolygonParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.createProton(canvas);\n      this.createEmitter({\n        canvas,\n        x: width / 2,\n        y: height / 2,\n        mainEmitter: true,\n        zone: \"bound\"\n      });\n\n      RAFManager.add(this.renderProton);\n    },\n    canvasResize({ width, height }) {\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      this.proton = new Proton();\n      const renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n    },\n\n    createRenderer(canvas) {\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CustomRenderer();\n      renderer.onProtonUpdate = () => {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n      };\n\n      renderer.onParticleUpdate = particle => {\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n\n        context.beginPath();\n        drawPolygon(particle, particle.data.count);\n\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n\n      renderer.onParticleDead = particle => {};\n\n      const drawPolygon = (particle, count) => {\n        if (count >= 7) {\n          context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n          );\n        } else {\n          const radius = particle.radius;\n\n          for (let i = 0; i <= count; i++) {\n            let x =\n              particle.p.x +\n              radius * Math.cos((((Math.PI / 180) * 360) / count) * i);\n            let y =\n              particle.p.y +\n              radius * Math.sin((((Math.PI / 180) * 360) / count) * i);\n\n            if (i === 0) context.moveTo(x, y);\n            else context.lineTo(x, y);\n          }\n        }\n      };\n\n      return renderer;\n    },\n\n    createEmitter({\n      mainEmitter,\n      canvas,\n      x,\n      y,\n      radius,\n      color = COLOR,\n      zone = \"dead\",\n      once = \"all\",\n      alpha = 0.85,\n      gravity = 3.5\n    }) {\n      const emitter = this.proton.pool.get(Proton.Emitter);\n\n      if (!emitter.completed) {\n        emitter.rate = new Proton.Rate(\n          this.num ? new Proton.Span(this.num) : new Proton.Span(4, 9),\n          new Proton.Span(1.6, 2.2)\n        );\n\n        const radiusInit = mainEmitter\n          ? new Proton.Radius(10, 110)\n          : new Proton.Radius(3, radius);\n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(radiusInit);\n        emitter.addInitialize(new Proton.Life(3, 6));\n        emitter.addInitialize(\n          new Proton.Velocity(\n            new Proton.Span(4, 6),\n            new Proton.Span(-90, 90),\n            \"polar\"\n          )\n        );\n\n        emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n        emitter.addBehaviour(new Proton.Color(color));\n        emitter.addBehaviour(new Proton.Scale(1, 0.3));\n        emitter.addBehaviour(new Proton.Rotate());\n        emitter.addBehaviour(new Proton.Gravity(gravity));\n\n        emitter.addBehaviour(this.customDeadBehaviour(canvas));\n        emitter.addBehaviour(\n          new Proton.CrossZone(\n            new Proton.RectZone(0, 0, canvas.width, canvas.height),\n            zone\n          )\n        );\n      }\n\n      emitter.p.x = x;\n      emitter.p.y = y;\n      if (once === \"once\") emitter.emit(\"once\");\n      else emitter.emit();\n\n      this.proton.addEmitter(emitter);\n      //this.expireEmitter(emitter);\n    },\n\n    expireEmitter(emitter) {\n      setTimeout(() => {\n        emitter.completed = true;\n        this.proton.pool.expire(emitter);\n        this.proton.removeEmitter(emitter);\n      }, 500);\n    },\n\n    customDeadBehaviour(canvas) {\n      return {\n        initialize: particle => {\n          particle.data = particle.data || {};\n          particle.data.oldRadius = particle.radius;\n          particle.data.emitterCount = 0;\n        },\n        applyBehaviour: particle => {\n          if (particle.radius < 5) return;\n          if (particle.data.emitterCount >= 2) return;\n\n          if (particle.radius <= (1 / 3) * particle.data.oldRadius) {\n            particle.data.emitterCount++;\n            this.createEmitter({\n              canvas,\n              x: particle.p.x,\n              y: particle.p.y,\n              radius: particle.radius * (1 / 2),\n              alpha: 0.5,\n              gravity: 5,\n              color: particle.color,\n              once: \"once\"\n            });\n          }\n        }\n      };\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestory() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n",{"version":3,"sources":["PolygonParticles.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PolygonParticles.vue","sourceRoot":"node_modules/particles-bg-vue/src/particles-bg/particles","sourcesContent":["<template>\n  <canvas-comp\n    :bg=\"bg\"\n    :canvas=\"canvas\"\n    global-composite-operation=\"xor\"\n    v-on:canvasInited=\"canvasInited\"\n    v-on:canvasResize=\"canvasResize\"\n    v-on:canvasMouseDown=\"canvasMouseDown\"\n  />\n</template>\n\n<script>\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\n\nconst COLOR = [\n  \"#f6b93b\",\n  \"#18dcff\",\n  \"#cd84f1\",\n  \"#ED4C67\",\n  \"#ffffff\",\n  \"#b71540\",\n  \"#32ff7e\",\n  \"#ff3838\"\n];\n\nexport default {\n  name: \"PolygonParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.createProton(canvas);\n      this.createEmitter({\n        canvas,\n        x: width / 2,\n        y: height / 2,\n        mainEmitter: true,\n        zone: \"bound\"\n      });\n\n      RAFManager.add(this.renderProton);\n    },\n    canvasResize({ width, height }) {\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      this.proton = new Proton();\n      const renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n    },\n\n    createRenderer(canvas) {\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CustomRenderer();\n      renderer.onProtonUpdate = () => {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n      };\n\n      renderer.onParticleUpdate = particle => {\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n\n        context.beginPath();\n        drawPolygon(particle, particle.data.count);\n\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n\n      renderer.onParticleDead = particle => {};\n\n      const drawPolygon = (particle, count) => {\n        if (count >= 7) {\n          context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n          );\n        } else {\n          const radius = particle.radius;\n\n          for (let i = 0; i <= count; i++) {\n            let x =\n              particle.p.x +\n              radius * Math.cos((((Math.PI / 180) * 360) / count) * i);\n            let y =\n              particle.p.y +\n              radius * Math.sin((((Math.PI / 180) * 360) / count) * i);\n\n            if (i === 0) context.moveTo(x, y);\n            else context.lineTo(x, y);\n          }\n        }\n      };\n\n      return renderer;\n    },\n\n    createEmitter({\n      mainEmitter,\n      canvas,\n      x,\n      y,\n      radius,\n      color = COLOR,\n      zone = \"dead\",\n      once = \"all\",\n      alpha = 0.85,\n      gravity = 3.5\n    }) {\n      const emitter = this.proton.pool.get(Proton.Emitter);\n\n      if (!emitter.completed) {\n        emitter.rate = new Proton.Rate(\n          this.num ? new Proton.Span(this.num) : new Proton.Span(4, 9),\n          new Proton.Span(1.6, 2.2)\n        );\n\n        const radiusInit = mainEmitter\n          ? new Proton.Radius(10, 110)\n          : new Proton.Radius(3, radius);\n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(radiusInit);\n        emitter.addInitialize(new Proton.Life(3, 6));\n        emitter.addInitialize(\n          new Proton.Velocity(\n            new Proton.Span(4, 6),\n            new Proton.Span(-90, 90),\n            \"polar\"\n          )\n        );\n\n        emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n        emitter.addBehaviour(new Proton.Color(color));\n        emitter.addBehaviour(new Proton.Scale(1, 0.3));\n        emitter.addBehaviour(new Proton.Rotate());\n        emitter.addBehaviour(new Proton.Gravity(gravity));\n\n        emitter.addBehaviour(this.customDeadBehaviour(canvas));\n        emitter.addBehaviour(\n          new Proton.CrossZone(\n            new Proton.RectZone(0, 0, canvas.width, canvas.height),\n            zone\n          )\n        );\n      }\n\n      emitter.p.x = x;\n      emitter.p.y = y;\n      if (once === \"once\") emitter.emit(\"once\");\n      else emitter.emit();\n\n      this.proton.addEmitter(emitter);\n      //this.expireEmitter(emitter);\n    },\n\n    expireEmitter(emitter) {\n      setTimeout(() => {\n        emitter.completed = true;\n        this.proton.pool.expire(emitter);\n        this.proton.removeEmitter(emitter);\n      }, 500);\n    },\n\n    customDeadBehaviour(canvas) {\n      return {\n        initialize: particle => {\n          particle.data = particle.data || {};\n          particle.data.oldRadius = particle.radius;\n          particle.data.emitterCount = 0;\n        },\n        applyBehaviour: particle => {\n          if (particle.radius < 5) return;\n          if (particle.data.emitterCount >= 2) return;\n\n          if (particle.radius <= (1 / 3) * particle.data.oldRadius) {\n            particle.data.emitterCount++;\n            this.createEmitter({\n              canvas,\n              x: particle.p.x,\n              y: particle.p.y,\n              radius: particle.radius * (1 / 2),\n              alpha: 0.5,\n              gravity: 5,\n              color: particle.color,\n              once: \"once\"\n            });\n          }\n        }\n      };\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestory() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n</script>\n"]}]}