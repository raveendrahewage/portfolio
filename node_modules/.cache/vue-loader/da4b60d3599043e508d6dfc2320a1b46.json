{"remainingRequest":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\particles-bg-vue\\src\\particles-bg\\particles\\SquareParticles.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\particles-bg-vue\\src\\particles-bg\\particles\\SquareParticles.vue","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Raveendra\\Desktop\\Academic\\PORTFOLIO\\portfolio\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport { getColor } from \"../utils/Color\";\n\nconst colors = [\n  \"#fad390\",\n  \"#81ecec\",\n  \"#ffffff\",\n  \"#badc58\",\n  \"#f9ca24\",\n  \"#FEA47F\"\n];\nexport default {\n  name: \"SquareParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      this.createProton(canvas);\n      RAFManager.add(this.renderProton);\n      if (this.color) {\n        canvas.style.backgroundColor = this.color;\n      }\n    },\n    canvasResize({ width, height }) {\n      const dis = 150;\n      this.crossZoneBehaviour.zone.width = width + 2 * dis;\n      this.crossZoneBehaviour.zone.height = height + 2 * dis;\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.proton = new Proton();\n      const emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.num ? this.num : 50);\n      emitter.damping = 0;\n\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(4, 70));\n      emitter.addInitialize(\n        new Proton.Velocity(new Proton.Span(4, 12), 180, \"polar\")\n      );\n      emitter.addInitialize(\n        new Proton.Position(new Proton.LineZone(0, 0, canvas.width, 0))\n      );\n\n      const dis = 150;\n      const crossZoneBehaviour = new Proton.CrossZone(\n        new Proton.RectZone(\n          0 - dis,\n          0 - dis,\n          canvas.width + 2 * dis,\n          canvas.height + 2 * dis\n        ),\n        \"cross\"\n      );\n      emitter.addBehaviour(crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.1, 0.55)));\n      emitter.addBehaviour(new Proton.Color(colors));\n\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      const renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n\n      this.crossZoneBehaviour = crossZoneBehaviour;\n      emitter.preEmit(2);\n    },\n    createRenderer(canvas) {\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CustomRenderer();\n\n      renderer.onProtonUpdate = () => {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        const w = particle.radius || 60;\n        const h = Proton.MathUtil.randomAToB(100, 200, \"int\");\n        particle.data.w = w;\n        particle.data.h = h;\n      };\n\n      renderer.onParticleUpdate = particle => {\n        const w = particle.data.w;\n        const h = particle.data.h;\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n\n        context.beginPath();\n        context.rect(particle.p.x - w / 2, particle.p.y - h / 2, w, h);\n\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n\n      return renderer;\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestory() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n",{"version":3,"sources":["SquareParticles.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SquareParticles.vue","sourceRoot":"node_modules/particles-bg-vue/src/particles-bg/particles","sourcesContent":["<template>\n  <canvas-comp\n    :bg=\"bg\"\n    :canvas=\"canvas\"\n    global-composite-operation=\"lighter\"\n    v-on:canvasInited=\"canvasInited\"\n    v-on:canvasResize=\"canvasResize\"\n    v-on:canvasMouseDown=\"canvasMouseDown\"\n  />\n</template>\n\n<script>\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport { getColor } from \"../utils/Color\";\n\nconst colors = [\n  \"#fad390\",\n  \"#81ecec\",\n  \"#ffffff\",\n  \"#badc58\",\n  \"#f9ca24\",\n  \"#FEA47F\"\n];\nexport default {\n  name: \"SquareParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      this.createProton(canvas);\n      RAFManager.add(this.renderProton);\n      if (this.color) {\n        canvas.style.backgroundColor = this.color;\n      }\n    },\n    canvasResize({ width, height }) {\n      const dis = 150;\n      this.crossZoneBehaviour.zone.width = width + 2 * dis;\n      this.crossZoneBehaviour.zone.height = height + 2 * dis;\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.proton = new Proton();\n      const emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.num ? this.num : 50);\n      emitter.damping = 0;\n\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(4, 70));\n      emitter.addInitialize(\n        new Proton.Velocity(new Proton.Span(4, 12), 180, \"polar\")\n      );\n      emitter.addInitialize(\n        new Proton.Position(new Proton.LineZone(0, 0, canvas.width, 0))\n      );\n\n      const dis = 150;\n      const crossZoneBehaviour = new Proton.CrossZone(\n        new Proton.RectZone(\n          0 - dis,\n          0 - dis,\n          canvas.width + 2 * dis,\n          canvas.height + 2 * dis\n        ),\n        \"cross\"\n      );\n      emitter.addBehaviour(crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.1, 0.55)));\n      emitter.addBehaviour(new Proton.Color(colors));\n\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      const renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n\n      this.crossZoneBehaviour = crossZoneBehaviour;\n      emitter.preEmit(2);\n    },\n    createRenderer(canvas) {\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CustomRenderer();\n\n      renderer.onProtonUpdate = () => {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        const w = particle.radius || 60;\n        const h = Proton.MathUtil.randomAToB(100, 200, \"int\");\n        particle.data.w = w;\n        particle.data.h = h;\n      };\n\n      renderer.onParticleUpdate = particle => {\n        const w = particle.data.w;\n        const h = particle.data.h;\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n\n        context.beginPath();\n        context.rect(particle.p.x - w / 2, particle.p.y - h / 2, w, h);\n\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n\n      return renderer;\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestory() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n</script>\n"]}]}